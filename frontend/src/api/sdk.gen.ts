// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { ApiAuthTokenCreateData, ApiAuthTokenCreateResponses, ApiUsersListData, ApiUsersListResponses, ApiUsersMeRetrieveData, ApiUsersMeRetrieveResponses, ApiUsersPartialUpdateData, ApiUsersPartialUpdateResponses, ApiUsersRetrieveData, ApiUsersRetrieveResponses, ApiUsersUpdateData, ApiUsersUpdateResponses, ProjectsCreateData, ProjectsCreateResponses, ProjectsDestroyData, ProjectsDestroyResponses, ProjectsListData, ProjectsListResponses, ProjectsPartialUpdateData, ProjectsPartialUpdateResponses, ProjectsRetrieveData, ProjectsRetrieveResponses, ProjectsUpdateData, ProjectsUpdateResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const apiAuthTokenCreate = <ThrowOnError extends boolean = false>(options: Options<ApiAuthTokenCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ApiAuthTokenCreateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth-token/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const apiUsersList = <ThrowOnError extends boolean = false>(options?: Options<ApiUsersListData, ThrowOnError>) => {
    return (options?.client ?? client).get<ApiUsersListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/',
        ...options
    });
};

export const apiUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<ApiUsersRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options
    });
};

export const apiUsersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiUsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ApiUsersPartialUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const apiUsersUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiUsersUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<ApiUsersUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const apiUsersMeRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiUsersMeRetrieveData, ThrowOnError>) => {
    return (options?.client ?? client).get<ApiUsersMeRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/me/',
        ...options
    });
};

/**
 * List all projects for the authenticated user
 *
 * Returns a paginated list of projects owned by the current user
 */
export const projectsList = <ThrowOnError extends boolean = false>(options?: Options<ProjectsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProjectsListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/projects/',
        ...options
    });
};

/**
 * ViewSet for managing projects.
 *
 * All endpoints require authentication.
 * Projects are filtered to show only those owned by the current user.
 */
export const projectsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ProjectsCreateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing projects.
 *
 * All endpoints require authentication.
 * Projects are filtered to show only those owned by the current user.
 */
export const projectsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProjectsDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<ProjectsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/projects/{uuid}/',
        ...options
    });
};

/**
 * ViewSet for managing projects.
 *
 * All endpoints require authentication.
 * Projects are filtered to show only those owned by the current user.
 */
export const projectsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<ProjectsRetrieveResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/projects/{uuid}/',
        ...options
    });
};

/**
 * ViewSet for managing projects.
 *
 * All endpoints require authentication.
 * Projects are filtered to show only those owned by the current user.
 */
export const projectsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ProjectsPartialUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/projects/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing projects.
 *
 * All endpoints require authentication.
 * Projects are filtered to show only those owned by the current user.
 */
export const projectsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<ProjectsUpdateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/projects/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
